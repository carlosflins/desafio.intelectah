// <auto-generated />
using System;
using Desafio.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Desafio.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230516185800_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Desafio.Domain.Entities.Exame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Observacoes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValue("")
                        .HasColumnName("Observacoes");

                    b.Property<int>("TipoExameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoExameId");

                    b.ToTable("Exame", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entities.MarcacaoConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DataHoraMarcacao")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("DataHoraMarcacao");

                    b.Property<int?>("ExameId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Protocolo")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Protocolo");

                    b.Property<int>("TipoExameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExameId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("Protocolo")
                        .IsUnique();

                    b.HasIndex("TipoExameId");

                    b.ToTable("MarcacaoConsulta", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("CPF");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.Property<int?>("Sexo")
                        .HasColumnType("int")
                        .HasColumnName("Sexo");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entities.TipoExame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoExame", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entities.Exame", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.TipoExame", "TipoExame")
                        .WithMany("Exames")
                        .HasForeignKey("TipoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoExame");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.MarcacaoConsulta", b =>
                {
                    b.HasOne("Desafio.Domain.Entities.Exame", "Exame")
                        .WithMany()
                        .HasForeignKey("ExameId");

                    b.HasOne("Desafio.Domain.Entities.Paciente", "Paciente")
                        .WithMany("MarcacoesConsulta")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Desafio.Domain.Entities.TipoExame", "TipoExame")
                        .WithMany("MarcacoesConsulta")
                        .HasForeignKey("TipoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");

                    b.Navigation("Paciente");

                    b.Navigation("TipoExame");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("MarcacoesConsulta");
                });

            modelBuilder.Entity("Desafio.Domain.Entities.TipoExame", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("MarcacoesConsulta");
                });
#pragma warning restore 612, 618
        }
    }
}
